/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package perfectnumber;

import java.awt.Component;
import java.awt.GridLayout;
import java.awt.TextField;
import java.util.Arrays;
import javax.swing.JFrame;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeListener;

/**
 *
 * @author GT
 */
public class SJFInterface extends javax.swing.JFrame {

    /**
     * Creates new form ShortestJob
     */
    public SJFInterface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        add_row = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_result = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        calculate = new javax.swing.JButton();
        txt_count = new javax.swing.JTextField();
        panel_myne = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel2.setText("Process Name:");

        jLabel3.setText("Burst Time:");

        jLabel4.setText("Arrival Time");

        add_row.setText("Add");
        add_row.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_rowActionPerformed(evt);
            }
        });

        txt_result.setColumns(20);
        txt_result.setRows(5);
        jScrollPane1.setViewportView(txt_result);

        jLabel1.setText("Number of Processes");

        calculate.setText("Calculate");
        calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateActionPerformed(evt);
            }
        });

        txt_count.setText("0");
        txt_count.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_countActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_myneLayout = new javax.swing.GroupLayout(panel_myne);
        panel_myne.setLayout(panel_myneLayout);
        panel_myneLayout.setHorizontalGroup(
            panel_myneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 433, Short.MAX_VALUE)
        );
        panel_myneLayout.setVerticalGroup(
            panel_myneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 222, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(calculate)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_myne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(67, 67, 67)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_count, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(99, 99, 99)
                                .addComponent(add_row, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(add_row)
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txt_count, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(31, 31, 31)
                .addComponent(panel_myne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(calculate)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(303, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void add_rowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_rowActionPerformed
        // TODO add your handling code here:
       
        int current_count = Integer.parseInt(txt_count.getText());
        int next_count = current_count+1;
//        GridLayout experimentLayout = new GridLayout(0,3);
//        panel_myne.setLayout(experimentLayout);
        String process_name = "process_"+next_count;
        String arrival_name = "arrival_time_"+next_count;
        String burst_name = "burst_time_"+next_count;
        panel_myne.setLayout(new GridLayout(0, 3, 70,10));
        TextField process = new TextField();   
        
        TextField arrival = new TextField();
        TextField burst = new TextField();
        process.setName(process_name);        
        burst.setName(burst_name);
        process.setText("Process "+next_count);
        arrival.setText("1");
        burst.setText("0");
        txt_count.setText(String.valueOf(next_count));
        panel_myne.add(process);
        panel_myne.add(arrival);
        panel_myne.add(burst);
        panel_myne.revalidate();
        panel_myne.repaint();
//        pnltexts.add(process);
//        panel1.add(arrival);
//        panel1.add(burst);
//        pnltexts.revalidate();
//        panel1.revalidate();
//        panel1.revalidate();        
//        pnltexts.repaint();
//        panel1.repaint();
//        panel1.repaint();
        panel_myne.repaint();
        
        
    }//GEN-LAST:event_add_rowActionPerformed

    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateActionPerformed
        // TODO add your handling code here:
        
        int count = Integer.parseInt(txt_count.getText());
        String message = "";
        if(count<=1){
            txt_result.setText("The Count has to be More than 1");
        }else{
             
            int[] burst_times = new int[count];
            int[] waiting_time = new int[count+1];
            int[] arrival_times = new int[count];
            int[] remaining_times = new int[count];
            int[] turn_around_time = new int[count];
            String[] processes = new String[count];            
            Component[] children = panel_myne.getComponents();            
            int count_children = children.length;
            String[] processes_list = new String[count_children];
//            for(int i=0;i<count_children;i++)
            int i = 0;
            for (Component sp : children) {                
                if (sp instanceof TextField) {                        
                    String text = ((TextField)sp).getText();                    
                    processes_list[i]=text;                   
                    i++;
                }                
               
            }
            int a = 0;
            int b = 1;
            int c = 2;
            int looper = 0,looper1 = 0,looper2 = 0;
            for(int j=0;j<count_children;j++){                
                if(j==a){
                    processes[looper]=processes_list[j];
                    looper++;
                    a+=3;
                }
                if(j==b){
                    arrival_times[looper1]=Integer.parseInt(processes_list[j]);
                    looper1++;
                    b+=3;
                }
                if(j==c){
                    burst_times[looper2]=Integer.parseInt(processes_list[j]);
                    looper2++;
                    c+=3;
                }
                
            }
//            System.out.println(Arrays.toString(burst_times));                   
            

//            for(int i=0;i<count;i++){
//                String process = "process_"+i;
////                String p = process.getText();
//                processes[i] = p;
//                arrival_times[i] = 0;
//                int b = (int )(Math.random() * 20 + 1);
//                burst_times[i] = b;            
//
//            }
//            for (int i = 0; i < count; i++) {
//                waiting_time[i] = 0;
//                turn_around_time[i] = 0;
//            }
            for(int k=0;k<count;k++){
                System.out.println("Process :"+processes[k]+" Burst Time: "+burst_times[k]+" Waiting Time: "+waiting_time[k]+" TAT: "+turn_around_time[k]);
            }
//            System.out.println("**********************************************************************************************************************");
//            int temp;
//            String temp_proc;
//            for (int i = 0; i < count; i++) {
//                for (int j = 0; j < count - 1; j++) {
//                    if (burst_times[j] > burst_times[j + 1]) {
//                        temp = burst_times[j];
//                        burst_times[j] = burst_times[j + 1];
//                        burst_times[j + 1] = temp;
//
//                        temp_proc  = processes[j];
//                        processes[j] = processes[j + 1];
//                        processes[j + 1] = temp_proc;
//
//                        temp = waiting_time[j];
//                        waiting_time[j] = waiting_time[j + 1];
//                        waiting_time[j + 1] = temp;
//                    }
//                }
//            }
//            for (int i = 0; i <count; i++) {
//                turn_around_time[i] = burst_times[i] + waiting_time[i];
//                waiting_time[i+1] = turn_around_time[i];
//            }
//
//            for(int i=0;i<count;i++){
//                message += "Process :"+processes[i]+" Burst Time: "+burst_times[i]+" Waiting Time: "+waiting_time[i]+" TAT: "+turn_around_time[i]+"\n";
//                System.out.println("Process :"+processes[i]+" Burst Time: "+burst_times[i]+" Waiting Time: "+waiting_time[i]+" TAT: "+turn_around_time[i]);
//            }
            System.out.println(Arrays.toString(burst_times));
            txt_result.setText(message);
        }
        
    }//GEN-LAST:event_calculateActionPerformed

    private void txt_countActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_countActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_countActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SJFInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SJFInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SJFInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SJFInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SJFInterface().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_row;
    private javax.swing.JButton calculate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel_myne;
    private javax.swing.JTextField txt_count;
    private javax.swing.JTextArea txt_result;
    // End of variables declaration//GEN-END:variables
}
